from PIL import Image
from PIL import ImageCms
import math
from api.util.MapGenerator import MapGenerator


class ImgToMap:
    def __init__(self):
        '''
        self.MAP_COLORS_LAB =  {
 'белый_1': (100, -0, 0),
            'черный_1': (0, 0, 0),
            'красный_1': (19, 40, 29),
            'красный_2': (28, 51, 41),
            'красный_3': (36, 61, 51),
            'красный_4': (45, 70, 59),
            'красный_5': (53, 80, 67),
            'красный_6': (55, 77, 35),
            'красный_7': (61, 65, 13),
            'красный_8': (71, 47, 0),
            'красно-оранжевый_1': (20, 38, 21),
            'красно-оранжевый_2': (29, 49, 28),
            'красно-оранжевый_3': (37, 59, 35),
            'красно-оранжевый_4': (46, 69, 42),
            'красно-оранжевый_5': (54, 78, 48),
            'красно-оранжевый_6': (59, 67, 32),
            'красно-оранжевый_7': (65, 51, 40),
            'красно-оранжевый_8': (74, 39, 9),
            'оранжевый_1': (24, 25, 35),
            'оранжевый_2': (34, 33, 46),
            'оранжевый_3': (42, 45, 53),
            'оранжевый_4': (51, 52, 62),
            'оранжевый_5': (60, 60, 70),
            'оранжевый_6': (67, 43, 60),
            'оранжевый_7': (72, 33, 42),
            'оранжевый_8': (82, 18, 28),
            'желто-оранжевый_1': (29, 13, 39),
            'желто-оранжевый_2': (41, 17, 49),
            'желто-оранжевый_3': (51, 22, 59),
            'желто-оранжевый_4': (62, 26, 68),
            'желто-оранжевый_5': (72, 30, 77),
            'желто-оранжевый_6': (78, 27, 70),
            'желто-оранжевый_7': (81, 13, 53),
            'желто-оранжевый_8': (88, 4, 36),
            'желтый_1': (41, -11, 48),
            'желтый_2': (56, -13, 60),
            'желтый_3': (70, -16, 72),
            'желтый_4': (84, -19, 83),
            'желтый_5': (97, -21, 94),
            'желтый_6': (97, -23, 87),
            'желтый_7': (97, -18, 70),
            'желтый_8': (98, -14, 48),
    'желто-зеленый_1': (37, -36, 43),
    'желто-зеленый_2': (51, -46, 54),
    'желто-зеленый_3': (64, -56, 64),
    'желто-зеленый_4': (76, -65, 65),
    'желто-зеленый_5': (89, -74, 84),
    'желто-зеленый_6': (90, -66, 78),
    'желто-зеленый_7': (91, -51, 63),
    'желто-зеленый_8': (93, -37, 42),
    'зеленый_1': (36, -43, 39),
    'зеленый_2': (50, -54, 50),
    'зеленый_3': (63, -63, 61),
    'зеленый_4': (75, -75, 71),
    'зеленый_5': (87, -85, 80),
    'зеленый_6': (88, -80, 72),
    'зеленый_7': (89, -67, 54),
    'зеленый_8': (91, -51, 32),
    'сине-зеленый_1': (37, -36, 16),
    'сине-зеленый_2': (51, -45, 21),
    'сине-зеленый_3': (64, -55, 25),
    'сине-зеленый_4': (76, -64, 30),
    'сине-зеленый_5': (88, -72, 34),
    'сине-зеленый_6': (89, -64, 23),
    'сине-зеленый_7': (90, -55, 18),
    'сине-зеленый_8': (92, -44, 14),
    'синий_1': (18, 14, -39),
    'синий_2': (25, 20, -50),
    'синий_3': (33, 25, -61),
    'синий_4': (40, 30, -72),
    'синий_5': (47, 35, -82),
    'синий_6': (55, 20, -70),
    'синий_7': (63, 11, -56),
    'синий_8': (75, -3, -37),
    'сине-фиолетовый_1': (10, 35, -52),
    'сине-фиолетовый_2': (16, 45, -66),
    'сине-фиолетовый_3': (24, 59, -84),
    'сине-фиолетовый_4': (28, 66, -92),
    'сине-фиолетовый_5': (33, 74, -105),
    'сине-фиолетовый_6': (37, 65, -98),
    'сине-фиолетовый_7': (46, 46, -84),
    'сине-фиолетовый_8': (54, 36, -71),
    'фиолетовый_1': (9, 40, -52),
    'фиолетовый_2': (16, 51, -66),
    'фиолетовый_3': (24, 64, -84),
    'фиолетовый_4': (28, 70, -92),
    'фиолетовый_5': (33, 79, -105),
    'фиолетовый_6': (39, 73, -96),
    'фиолетовый_7': (49, 52, -79),
    'фиолетовый_8': (61, 38, -60),
    'красно-фиолетовый_1': (15, 43, -43),
    'красно-фиолетовый_2': (22, 54, -55),
    'красно-фиолетовый_3': (32, 68, -70),
    'красно-фиолетовый_4': (37, 75, -77),
    'красно-фиолетовый_5': (44, 85, -87),
    'красно-фиолетовый_6': (49, 77, -79),
    'красно-фиолетовый_7': (59, 61, -62),
    'красно-фиолетовый_8': (71, 38, -43),

        }
        '''
        self.MapGenerator=MapGenerator()
        self.MAP_COLORS_LAB = self.MapGenerator.generate_color_map()
        self.MAP_COLORS_LAB['белый_1']=(100, -0, 0)
        self.MAP_COLORS_LAB['черный_1'] = (0, 0, 0)
        self.colors = list(self.MAP_COLORS_LAB.values())

    def rgb_to_lab(self, img):
        srgb_profile = ImageCms.createProfile("sRGB")
        lab_profile = ImageCms.createProfile("LAB")

        rgb2lab_transform = ImageCms.buildTransformFromOpenProfiles(srgb_profile, lab_profile, "RGB", "LAB")
        lab_im = ImageCms.applyTransform(img, rgb2lab_transform)
        return lab_im

    def beautufyCounts(self, colors):
        temp = {}

        total_pixels = sum(colors.values())
        for key, value in colors.items():
            if value > total_pixels / 500:
                temp[str(key)] = (round(value / total_pixels, 4) * 100, value)

        return temp

    def isWhite(self, target):
        L = target[0]
        A = target[1]
        B = target[2]

        if L >= 90 and L <= 100:
            if A >= -10 and A <= 10:
                if B >= -10 and B <= 10:
                    return True
        return False

    def get_map(self, img):
        height, width, depth = img.shape

        stat = {}
        for h in range(height):
            for w in range(width):

                points = self.colors
                target = img[h][w]

                if self.isWhite(target):

                    continue

                lenghts = {}
                for k, v in self.MAP_COLORS_LAB.items():

                    diffL = target[0] - v[0]
                    diffA = target[1] - v[1]
                    diffB = target[2] - v[2]

                    squared_sum = math.pow(diffL, 2) + math.pow(diffA, 2) + math.pow(diffB, 2)
                    lenghts[k] = math.sqrt(squared_sum)

                lowest = min(lenghts.items(), key=lambda x: x[1])

                color = lowest[0]


                img[h][w] = self.MAP_COLORS_LAB[color]

                if color in stat.keys():
                    stat[color] = stat[color] + 1
                else:
                    stat[color] = 1

        image_map = self.beautufyCounts(stat)

        processed_output = {
            'красный': 0,
            'красно-оранжевый': 0,
            'оранжевый': 0,
            'желто-оранжевый': 0,
            'желтый': 0,
            'желто-зеленый': 0,
            'зеленый': 0,
            'сине-зеленый': 0,
            'синий': 0,
            'сине-фиолетовый': 0,
            'фиолетовый': 0,
            'красно-фиолетовый': 0,
            'белый': 0,
            'черный': 0,
        }
        for key, value in image_map.items():
            words = key.split('_')
            processed_output[words[0]] = processed_output[words[0]] + value[1]

        return processed_output
